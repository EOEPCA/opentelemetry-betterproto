# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: opentelemetry/proto/collector/metrics/v1/metrics_service.proto
# plugin: python-betterproto
# This file has been @generated

from dataclasses import dataclass
from typing import (
    TYPE_CHECKING,
    Dict,
    List,
    Optional,
)

import betterproto
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase

from ....metrics import v1 as ___metrics_v1__


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


@dataclass(eq=False, repr=False)
class ExportMetricsServiceRequest(betterproto.Message):
    resource_metrics: List["___metrics_v1__.ResourceMetrics"] = (
        betterproto.message_field(1)
    )
    """
    An array of ResourceMetrics.
     For data coming from a single resource this array will typically contain one
     element. Intermediary nodes (such as OpenTelemetry Collector) that receive
     data from multiple origins typically batch the data before forwarding further and
     in that case this array will contain multiple elements.
    """


@dataclass(eq=False, repr=False)
class ExportMetricsServiceResponse(betterproto.Message):
    partial_success: "ExportMetricsPartialSuccess" = betterproto.message_field(1)
    """
    The details of a partially successful export request.
    
     If the request is only partially accepted
     (i.e. when the server accepts only parts of the data and rejects the rest)
     the server MUST initialize the `partial_success` field and MUST
     set the `rejected_<signal>` with the number of items it rejected.
    
     Servers MAY also make use of the `partial_success` field to convey
     warnings/suggestions to senders even when the request was fully accepted.
     In such cases, the `rejected_<signal>` MUST have a value of `0` and
     the `error_message` MUST be non-empty.
    
     A `partial_success` message with an empty value (rejected_<signal> = 0 and
     `error_message` = "") is equivalent to it not being set/present. Senders
     SHOULD interpret it the same way as in the full success case.
    """


@dataclass(eq=False, repr=False)
class ExportMetricsPartialSuccess(betterproto.Message):
    rejected_data_points: int = betterproto.int64_field(1)
    """
    The number of rejected data points.
    
     A `rejected_<signal>` field holding a `0` value indicates that the
     request was fully accepted.
    """

    error_message: str = betterproto.string_field(2)
    """
    A developer-facing human-readable message in English. It should be used
     either to explain why the server rejected parts of the data during a partial
     success or to convey warnings/suggestions during a full success. The message
     should offer guidance on how users can address such issues.
    
     error_message is an optional field. An error_message with an empty value
     is equivalent to it not being set.
    """


class MetricsServiceStub(betterproto.ServiceStub):
    async def export(
        self,
        export_metrics_service_request: "ExportMetricsServiceRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "ExportMetricsServiceResponse":
        return await self._unary_unary(
            "/opentelemetry.proto.collector.metrics.v1.MetricsService/Export",
            export_metrics_service_request,
            ExportMetricsServiceResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class MetricsServiceBase(ServiceBase):

    async def export(
        self, export_metrics_service_request: "ExportMetricsServiceRequest"
    ) -> "ExportMetricsServiceResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_export(
        self,
        stream: "grpclib.server.Stream[ExportMetricsServiceRequest, ExportMetricsServiceResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.export(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/opentelemetry.proto.collector.metrics.v1.MetricsService/Export": grpclib.const.Handler(
                self.__rpc_export,
                grpclib.const.Cardinality.UNARY_UNARY,
                ExportMetricsServiceRequest,
                ExportMetricsServiceResponse,
            ),
        }
