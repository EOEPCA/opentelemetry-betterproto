# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: opentelemetry/proto/logs/v1/logs.proto
# plugin: python-betterproto
# This file has been @generated

from dataclasses import dataclass
from typing import List

import betterproto

from ...common import v1 as __common_v1__
from ...resource import v1 as __resource_v1__


class SeverityNumber(betterproto.Enum):
    """Possible values for LogRecord.SeverityNumber."""

    UNSPECIFIED = 0
    """UNSPECIFIED is the default SeverityNumber, it MUST NOT be used."""

    TRACE = 1
    TRACE2 = 2
    TRACE3 = 3
    TRACE4 = 4
    DEBUG = 5
    DEBUG2 = 6
    DEBUG3 = 7
    DEBUG4 = 8
    INFO = 9
    INFO2 = 10
    INFO3 = 11
    INFO4 = 12
    WARN = 13
    WARN2 = 14
    WARN3 = 15
    WARN4 = 16
    ERROR = 17
    ERROR2 = 18
    ERROR3 = 19
    ERROR4 = 20
    FATAL = 21
    FATAL2 = 22
    FATAL3 = 23
    FATAL4 = 24


class LogRecordFlags(betterproto.Enum):
    """
    LogRecordFlags represents constants used to interpret the
     LogRecord.flags field, which is protobuf 'fixed32' type and is to
     be used as bit-fields. Each non-zero value defined in this enum is
     a bit-mask.  To extract the bit-field, for example, use an
     expression like:

       (logRecord.flags & LOG_RECORD_FLAGS_TRACE_FLAGS_MASK)
    """

    DO_NOT_USE = 0
    """
    The zero value for the enum. Should not be used for comparisons.
     Instead use bitwise "and" with the appropriate mask as shown above.
    """

    TRACE_FLAGS_MASK = 255
    """Bits 0-7 are used for trace flags."""


@dataclass(eq=False, repr=False)
class LogsData(betterproto.Message):
    """
    LogsData represents the logs data that can be stored in a persistent storage,
     OR can be embedded by other protocols that transfer OTLP logs data but do not
     implement the OTLP protocol.

     The main difference between this message and collector protocol is that
     in this message there will not be any "control" or "metadata" specific to
     OTLP protocol.

     When new fields are added into this message, the OTLP request MUST be updated
     as well.
    """

    resource_logs: List["ResourceLogs"] = betterproto.message_field(1)
    """
    An array of ResourceLogs.
     For data coming from a single resource this array will typically contain
     one element. Intermediary nodes that receive data from multiple origins
     typically batch the data before forwarding further and in that case this
     array will contain multiple elements.
    """


@dataclass(eq=False, repr=False)
class ResourceLogs(betterproto.Message):
    """A collection of ScopeLogs from a Resource."""

    resource: "__resource_v1__.Resource" = betterproto.message_field(1)
    """
    The resource for the logs in this message.
     If this field is not set then resource info is unknown.
    """

    scope_logs: List["ScopeLogs"] = betterproto.message_field(2)
    """A list of ScopeLogs that originate from a resource."""

    schema_url: str = betterproto.string_field(3)
    """
    The Schema URL, if known. This is the identifier of the Schema that the resource data
     is recorded in. To learn more about Schema URL see
     https://opentelemetry.io/docs/specs/otel/schemas/#schema-url
     This schema_url applies to the data in the "resource" field. It does not apply
     to the data in the "scope_logs" field which have their own schema_url field.
    """


@dataclass(eq=False, repr=False)
class ScopeLogs(betterproto.Message):
    """A collection of Logs produced by a Scope."""

    scope: "__common_v1__.InstrumentationScope" = betterproto.message_field(1)
    """
    The instrumentation scope information for the logs in this message.
     Semantically when InstrumentationScope isn't set, it is equivalent with
     an empty instrumentation scope name (unknown).
    """

    log_records: List["LogRecord"] = betterproto.message_field(2)
    """A list of log records."""

    schema_url: str = betterproto.string_field(3)
    """
    The Schema URL, if known. This is the identifier of the Schema that the log data
     is recorded in. To learn more about Schema URL see
     https://opentelemetry.io/docs/specs/otel/schemas/#schema-url
     This schema_url applies to all logs in the "logs" field.
    """


@dataclass(eq=False, repr=False)
class LogRecord(betterproto.Message):
    """
    A log record according to OpenTelemetry Log Data Model:
     https://github.com/open-telemetry/oteps/blob/main/text/logs/0097-log-data-model.md
    """

    time_unix_nano: int = betterproto.fixed64_field(1)
    """
    time_unix_nano is the time when the event occurred.
     Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January 1970.
     Value of 0 indicates unknown or missing timestamp.
    """

    observed_time_unix_nano: int = betterproto.fixed64_field(11)
    """
    Time when the event was observed by the collection system.
     For events that originate in OpenTelemetry (e.g. using OpenTelemetry Logging SDK)
     this timestamp is typically set at the generation time and is equal to Timestamp.
     For events originating externally and collected by OpenTelemetry (e.g. using
     Collector) this is the time when OpenTelemetry's code observed the event measured
     by the clock of the OpenTelemetry code. This field MUST be set once the event is
     observed by OpenTelemetry.
    
     For converting OpenTelemetry log data to formats that support only one timestamp or
     when receiving OpenTelemetry log data by recipients that support only one timestamp
     internally the following logic is recommended:
       - Use time_unix_nano if it is present, otherwise use observed_time_unix_nano.
    
     Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January 1970.
     Value of 0 indicates unknown or missing timestamp.
    """

    severity_number: "SeverityNumber" = betterproto.enum_field(2)
    """
    Numerical value of the severity, normalized to values described in Log Data Model.
     [Optional].
    """

    severity_text: str = betterproto.string_field(3)
    """
    The severity text (also known as log level). The original string representation as
     it is known at the source. [Optional].
    """

    body: "__common_v1__.AnyValue" = betterproto.message_field(5)
    """
    A value containing the body of the log record. Can be for example a human-readable
     string message (including multi-line) describing the event in a free form or it can
     be a structured data composed of arrays and maps of other values. [Optional].
    """

    attributes: List["__common_v1__.KeyValue"] = betterproto.message_field(6)
    """
    Additional attributes that describe the specific event occurrence. [Optional].
     Attribute keys MUST be unique (it is not allowed to have more than one
     attribute with the same key).
    """

    dropped_attributes_count: int = betterproto.uint32_field(7)
    flags: int = betterproto.fixed32_field(8)
    """
    Flags, a bit field. 8 least significant bits are the trace flags as
     defined in W3C Trace Context specification. 24 most significant bits are reserved
     and must be set to 0. Readers must not assume that 24 most significant bits
     will be zero and must correctly mask the bits when reading 8-bit trace flag (use
     flags & LOG_RECORD_FLAGS_TRACE_FLAGS_MASK). [Optional].
    """

    trace_id: bytes = betterproto.bytes_field(9)
    """
    A unique identifier for a trace. All logs from the same trace share
     the same `trace_id`. The ID is a 16-byte array. An ID with all zeroes OR
     of length other than 16 bytes is considered invalid (empty string in OTLP/JSON
     is zero-length and thus is also invalid).
    
     This field is optional.
    
     The receivers SHOULD assume that the log record is not associated with a
     trace if any of the following is true:
       - the field is not present,
       - the field contains an invalid value.
    """

    span_id: bytes = betterproto.bytes_field(10)
    """
    A unique identifier for a span within a trace, assigned when the span
     is created. The ID is an 8-byte array. An ID with all zeroes OR of length
     other than 8 bytes is considered invalid (empty string in OTLP/JSON
     is zero-length and thus is also invalid).
    
     This field is optional. If the sender specifies a valid span_id then it SHOULD also
     specify a valid trace_id.
    
     The receivers SHOULD assume that the log record is not associated with a
     span if any of the following is true:
       - the field is not present,
       - the field contains an invalid value.
    """
